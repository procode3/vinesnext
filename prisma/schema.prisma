generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model File {
  id           String      @id @default(cuid())
  name         String
  url          String
  type         FileType
  orderId      String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  submissionId String?
  Order        Order?      @relation(fields: [orderId], references: [id])
  submission   submission? @relation(fields: [submissionId], references: [id])

  @@index([orderId], map: "orderId")
}

model Order {
  id             String          @id @default(cuid())
  orderType      Order_type
  writerId       String?
  name           String
  topic          String
  description    String
  subject        Subject
  pages          Int
  words          Int?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  clientDeadline DateTime
  writerDeadline DateTime?
  amountReceived Float?
  educationLevel Education_level
  orderStatus    Order_status    @default(NEW)
  writerRating   Int?
  citationStyle  Citation_style? @default(MLA)
  spacing        Spacing?        @default(DOUBLE)
  sources        Int?
  userId         String?
  assignedById   String?
  clientId       String?
  writerFee      Float?
  isArchived     Boolean         @default(false)
  File           File[]
  assigner       User?           @relation("assignedby", fields: [assignedById], references: [id])
  client         User?           @relation("client", fields: [clientId], references: [id])
  creator        User?           @relation("createdby", fields: [userId], references: [id])
  writer         User?           @relation("writer", fields: [writerId], references: [id])
  submission     submission?

  @@index([writerId], map: "writerId")
}

model Rating {
  id         String    @id @default(cuid())
  level      String
  limit      Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  settingsId String?
  Settings   Settings? @relation(fields: [settingsId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Settings {
  id        String   @id @default(cuid())
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ratingId  String?
  Rating    Rating[]
}

model User {
  id             String       @id @default(cuid())
  name           String
  email          String       @unique
  password       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  rating         Int          @default(0)
  emailVerified  DateTime?
  image          String?
  phone          String?
  userType       User_type    @default(WRITER)
  isArchived     Boolean      @default(false)
  Account        Account[]
  assignedOrders Order[]      @relation("assignedby")
  clientOrders   Order[]      @relation("client")
  createdOrders  Order[]      @relation("createdby")
  writerOrders   Order[]      @relation("writer")
  Session        Session[]
  submission     submission[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  expires DateTime

  @@unique([id, token])
}

model submission {
  id         String   @id @default(cuid())
  orderId    String   @unique
  userId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isArchived Boolean  @default(false)
  File       File[]
  Order      Order    @relation(fields: [orderId], references: [id])
  User       User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "userId")
}

enum Citation_style {
  MLA
  APA6
  APA7
  CHICAGO
  HARVARD
  TURABIAN
  VANCOUVER
  OSCOLA
  IEEE
  AMA
  ACS
  AGLC
  ASA
  CSE
  OTHER
}

enum Education_level {
  HIGH_SCHOOL
  UNDERGRADUATE
  COLLEGE
  MASTERS
  PHD
  OTHER
}

enum FileType {
  INSTRUCTIONS
  RUBRIC
  ORDER_DOCUMENT
  REVISION_DOCUMENT
  GRAMMARLY_REPORT
  TURNITIN_REPORT
  OTHER
}

enum Order_status {
  NEW
  AVAILABLE
  UNCONFIRMED
  INPROGRESS
  COMPLETED
  CANCELLED
  REVISION
  DISPUTE
  REFUNDED
  EDITING
  ACCEPTED
}

enum Order_type {
  ESSAY
  RESEARCH_PAPER
  TERM_PAPER
  COURSEWORK
  CASE_STUDY
  BOOK_REVIEW
  ARTICLE_REVIEW
  ANNOTATED_BIBLIOGRAPHY
  BOOK_REPORT
  MOVIE_REVIEW
  MOVIE_CRITIQUE
  ARTICLE
  ARTICLE_CRITIQUE
  REACTION_PAPER
  LETTER
  REFLECTION_PAPER
  LAB_REPORT
  LAB_WORK
  SPEECH
  PRESENTATION
  POWERPOINT_PRESENTATION
  MATH_PROBLEM
  STATISTICS_PROJECT
  RESEARCH_SUMMARY
  THESIS
  DISSERTATION
  THESIS_PROPOSAL
  DISSERTATION_PROPOSAL
  RESEARCH_PROPOSAL
  ADMISSION_ESSAY
  SCHOLARSHIP_ESSAY
  PERSONAL_STATEMENT
  EDITING
  PROOFREADING
  REWRITING
  RESUME
  CV
  COVER_LETTER
  OTHER
}

enum Spacing {
  SINGLE
  DOUBLE
  ONEANDHALF
}

enum Subject {
  MATH
  SCIENCE
  ENGLISH
  BIOLOGY
  HISTORY
  GEOGRAPHY
  CHEMISTRY
  PHYSICS
  LITERATURE
  ECONOMICS
  ENGINEERING
  COMPUTER_SCIENCE
  BUSINESS
  LAW
  PHILOSOPHY
  PSYCHOLOGY
  POLITICAL_SCIENCE
  SOCIOLOGY
  STATISTICS
  ACCOUNTING
  PROGRAMMING
  OTHER
  SOCIAL_STUDIES
  SOCIAL_SCIENCE
}

enum User_type {
  WRITER
  CLIENT
  SUPER_ADMIN
  ADMIN
  MANAGER
}
